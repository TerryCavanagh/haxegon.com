var moduleDescriptions = {
	Gfx:"For drawing and manipulating shapes and images.",
	Col:"So many colors!",
	Text:"For displaying text on screen :D",
	Music:"For all your music and sound needs.",
	Key:"A list of all of the key names. For use with <b>Input</b> functions.",
	Input:"Responding to key presses!",
	Mouse:"Checking out mouse movement and clicks.",
	Convert:"Strings to ints to floats and back again.",
	Core:"Advanced functions to change how your program runs.",
	Random:"",
	Math:"",
};

var haxeLibraryArray = [
["Gfx",".","M"],
["Col",".","E"],
["Text",".","M"],
["Music",".","M"],
["Key",".","E"],
["Input",".","M"],
["Mouse",".","M"],
["Convert",".","M"],
["Random",".","M"],
["Game",".","M"],
["Math",".","M"],
["String",".","M"],
["trace","(message)","F"],
["function ",""],
["break",";"],
["case "],
["continue",";"],
["default",":"],
["new"],
["do"],
["else"],
["false"],
["true"],
["for ",""],
["if"],
["in"],
["null"],
["switch "],
["var "],
["while"],
["return "],
//putting a space after the brackets below stops autocomplete from inserting a semicolon
["update","() ","F","This function will be called every frame by the engine if you define it."]
];


var haxeMethodArray = [
];

var haxeHintArray = [

["Gfx.clearscreen","(color)","F"],
["Gfx.clearscreeneachframe",":Bool","P"],
["Gfx.drawbox","(x, y, width, height, col)","F"],
["Gfx.fillbox","(x, y, width, height, col)","F"],
["Gfx.drawtri","(x1, y1, x2, y2, x3, y3, col)","F"],
["Gfx.filltri","(x1, y1, x2, y2, x3, y3, col)","F"],
["Gfx.drawcircle","(x, y, radius, col)","F"],
["Gfx.fillcircle","(x, y, radius, col)","F"],
["Gfx.drawhexagon","(x, y, radius, angle, col)","F"],
["Gfx.fillhexagon","(x, y, radius, angle, col)","F"],
["Gfx.drawline","(x1, y1, x2, y2, col)","F"],
["Gfx.linethickness",":Float","P"],
["Gfx.getpixel","(x, y)","F"],
["Gfx.setpixel","(x, y, col):Int","F"],
["Gfx.rgb","(red [0-255], green [0-255], blue [0-255] ):Int","F","Converts a color with given red, green, and blue values (between 0-255 each) to a single hex number."],
["Gfx.hsl","(hue [0-0], saturation [0-1.0], lightness [0-1.0] ):Int","F","Converts a color with given hue (0-360), saturation [0-1], and lightness [0-1] values to a single hex number."],
["Gfx.getred","(col):Int","F","Returns the red component of a hex color (Between 0-255 inclusive)."],
["Gfx.getgreen","(col):Int","F","Returns the green component of a hex color (Between 0-255 inclusive)."],
["Gfx.getblue","(col):Int","F","Returns the blue component of a hex color (Between 0-255 inclusive)."],
["Gfx.gethue","(col):Int","F","Returns the hue (0-360) value of a color."],
["Gfx.getsaturation","(col):Float","F","Returns the saturation (0.0-1.0) value of a color."],
["Gfx.getlightness","(col):Int","F","Returns the lightness (0.0-1.0) value of a color."],
["Gfx.screenwidth",":Int","P"],
["Gfx.screenheight",":Int","P"],
["Gfx.screenwidthmid",":Int","P","Returns screen width divided by two."],
["Gfx.screenheightmid",":Int","P","Returns screen height divided by two."],
["Gfx.drawimage","(x, y, imagename)","F"],
["Gfx.imagewidth","(imagename):Int","P"],
["Gfx.imageheight","(imagename):Int","P"],
["Gfx.loadimagestring","(imagename, imagestring, optional color1, color2, color3, color4) ","F"],
["Gfx.createimage","(imagename, width, height) ","F"],
["Gfx.resizeimage","(imagename, scale)","F"],
["Gfx.drawtoscreen","()","F"],
["Gfx.drawtoimage","(imagename)","F"],
["Gfx.grabimagefromscreen","(imagename, screen x, screen y)","F","This function grabs a copy of the screen from position x,y, and places it in the image."],
["Gfx.grabimagefromimage","(imagename, sourceimagename, image x, image y, imagewidth=w, imageheight=h)","F", "Imagewidth and Imageheight are optional parameters. If left out, the function will use the width and height of the destination image."],
["Gfx.showfps",":Bool","P","Whether or not to show the fps counter."],
["Gfx.rotation","(angle:Float, xpivot=Gfx.CENTER, ypivot=Gfx.CENTER)","F","Rotates image drawing functions. Optionally set rotation pivot point."],
["Gfx.scale","(xscale, yscale, xpivot=Gfx.CENTER, ypivot=Gfx.CENTER)","F","Scales image drawing functions, as it's being drawn. Optionally set scaling pivot point."],
["Gfx.imagecolor","(c:Int = Col.WHITE)","F","Set a colour multipler in RGB for image drawing functions. Leave parameter blank to return to normal."],
["Gfx.CENTER","","P"],
["Gfx.LEFT","","P"],
["Gfx.RIGHT","","P"],
["Gfx.TOP","","P"],
["Gfx.BOTTOM","","P"],
["Col.BLACK","","Col"],
["Col.GREY","","Col"],
["Col.WHITE","","Col"],
["Col.RED","","Col"],
["Col.PINK","","Col"],
["Col.DARKBROWN","","Col"],
["Col.BROWN","","Col"],
["Col.ORANGE","","Col"],
["Col.YELLOW","","Col"],
["Col.DARKGREEN","","Col"],
["Col.GREEN","","Col"],
["Col.LIGHTGREEN","","Col"],
["Col.NIGHTBLUE","","Col"],
["Col.DARKBLUE","","Col"],
["Col.BLUE","","Col"],
["Col.LIGHTBLUE","","Col"],
["Col.MAGENTA","","Col"],
["Col.TRANSPARENT","","Col"],
["Text.setfont","(fontname:Font, size:Float = 1)","F","Type Font. to see a list of fonts in autocomplete!"],
["Text.changesize","(fontsize)","F","Change the size of the font. 1 is normal, 2 is double size, 3 is triple, etc."],
["Text.display","(x, y, text, col)","F","Draws text on the screen at a given coordinate."],
["Text.input",'(x, y, "Question: ", Q colour, A colour):Bool',"F"],
["Text.getinput","():String","F"],
["Text.inputsound",":Int","P","Sets a sound to play while typing in Text.input(). For no sound, set to -1."],
["Text.inputmaxlength",":Int","P","Sets maximum response length of Text.input()."],
["Text.rotation","(angle:Float)","F","Sets the rotation of the next Text.display() command."],
["Text.align","(position)","F","Sets the alignment for the next Text.display() command. Pass either Text.LEFT, Text.CENTER or Text.RIGHT."],
["Text.CENTER","","P"],
["Text.LEFT","","P"],
["Text.RIGHT","","P"],
["Text.TOP","","P"],
["Text.BOTTOM","","P"],
["Text.height","():Float","F"],
["Text.len","(t:String):Float","F"],
["Music.playsound","(seed, volume [0-1] )","F"],
["Music.playnote","(seed,pitch,length,volume [0-1] )","F"],
["Music.playmusic","(musicDat)","F"],
["Music.stopmusic","()","F"],
["Music.musicvol",":Float","P","Sets the music volume, must be between 0 and 1 (default is 1)."],
["Music.musicloop",":Bool","P","Should the music loop or not? (defaults to true)"],
["Key.A","","E"],
["Key.B","","E"],
["Key.C","","E"],
["Key.D","","E"],
["Key.E","","E"],
["Key.F","","E"],
["Key.G","","E"],
["Key.H","","E"],
["Key.I","","E"],
["Key.J","","E"],
["Key.K","","E"],
["Key.L","","E"],
["Key.M","","E"],
["Key.N","","E"],
["Key.O","","E"],
["Key.P","","E"],
["Key.Q","","E"],
["Key.R","","E"],
["Key.S","","E"],
["Key.T","","E"],
["Key.U","","E"],
["Key.V","","E"],
["Key.W","","E"],
["Key.X","","E"],
["Key.Y","","E"],
["Key.Z","","E"],
["Key.ZERO","","E"],
["Key.ONE","","E"],
["Key.TWO","","E"],
["Key.THREE","","E"],
["Key.FOUR","","E"],
["Key.FIVE","","E"],
["Key.SIX","","E"],
["Key.SEVEN","","E"],
["Key.EIGHT","","E"],
["Key.NINE","","E"],
["Key.F1","","E"],
["Key.F2","","E"],
["Key.F3","","E"],
["Key.F4","","E"],
["Key.F5","","E"],
["Key.F6","","E"],
["Key.F7","","E"],
["Key.F8","","E"],
["Key.F9","","E"],
["Key.F10","","E"],
["Key.F11","","E"],
["Key.F12","","E"],
["Key.MINUS","","E"], 
["Key.PLUS","","E"], 
["Key.DELETE","","E"], 
["Key.BACKSPACE","","E"], 
["Key.LBRACKET","","E"],
["Key.RBRACKET","","E"], 
["Key.BACKSLASH","","E"],
["Key.CAPSLOCK","","E"],
["Key.SEMICOLON","","E"],
["Key.QUOTE","","E"],
["Key.COMMA","","E"],
["Key.PERIOD","","E"],
["Key.SLASH","","E"],
["Key.ESCAPE","","E"],
["Key.ENTER","","E"],
["Key.SHIFT","","E"],
["Key.CONTROL","","E"],
["Key.ALT","","E"],
["Key.SPACE","","E"],
["Key.UP","","E"],
["Key.DOWN","","E"],
["Key.LEFT","","E"],
["Key.RIGHT","","E"],
["Input.justpressed","(Key.ENTER):Bool","F","True if the key has been pressed this frame."],
["Input.pressed","(Key.LEFT):Bool","F","True if this key is currently held down."],
["Input.justreleased","(Key.SPACE):Bool","F","True if the key has been released this frame"],
["Input.delaypressed","(Key.Z, 5):Bool","F","True once every N frames, if the key is pressed."],
["Input.getchar","():String","F","Returns the last letter pressed."],
["Mouse.x",":Int","P"],
["Mouse.y",":Int","P"],
["Mouse.leftclick","():Bool","F","True if the button has been clicked this frame."],
["Mouse.leftheld","():Bool","F","True if the button is held down this frame."],
["Mouse.leftreleased","():Bool","F","True if the mouse has been released this frame."],
["Mouse.middleclick","():Bool","F","True if the button has been clicked this frame."],
["Mouse.middleheld","():Bool","F","True if the button is held down this frame."],
["Mouse.middlereleased","():Bool","F","True if the mouse has been released this frame."],
["Mouse.rightclick","():Bool","F","True if the button has been clicked this frame."],
["Mouse.rightheld","():Bool","F","True if the button is held down this frame."],
["Mouse.rightreleased","():Bool","F","True if the mouse has been released this frame."],
["Mouse.mousewheel",":Int","P"],
["Convert.tostring","(1234):String","F"],
["Convert.toint",'("15"):Int',"F","Convert a string or a floating-point number to an integer."],
["Convert.tofloat",'("3.1417826"):Float',"F","Convert a string or an integer to a floating-point number."],
["Random.int","(from, to_inclusive):Int","F"],
["Random.float","(from, to_inclusive):Float","F"],
["Random.string","(length):String","F"],
["Random.bool","():Bool","F","50:50 chance of being true/false"],
["Random.occasional","():Bool","F","True one time in five."],
["Random.rare","():Bool","F","5% chance of being true"],
["Random.chance","(n:int):Bool","F","n% chance of being true"],
["Random.pick","(list:Array<T>):T","F","Picks a random element from an array."],
["Random.pickstring",'("this one", "or this one?", "maybe this one?"):String',"F","Pick between a list of strings. Can list up to 12!"],
["Random.pickint","(5, 14, 72, 92, 1, -723, 8):Int","F","Pick between a list of integers. Can list up to 12!"],
["Random.pickfloat","(5.1, 14.2, 72.3, 92.4, 1.5, -723.6, 8.7):Float","F","Pick between a list of floating-point numbers. Can list up to 12!"],
["Math.PI",":Float","C"],
["Math.abs","(v:Float):Float","F"],
["Math.acos","(v:Float):Float","F"],
["Math.asin","(v:Float):Float","F"],
["Math.atan","(v:Float):Float","F"],
["Math.atan2","(y:Float,x:Float):Float","F"],
["Math.ceil","(v:Float):Int","F"],
["Math.cos","(v:Float):Float","F"],
["Math.exp","(v:Float):Float","F"],
["Math.floor","(v:Float):Int","F"],
["Math.fround","(v:Float):Float","F"],
["Math.log","(v:Float):Float","F"],
["Math.max","(a:Float,b:Float):Float","F"],
["Math.min","(a:Float,b:Float):Float","F"],
["Math.pow","(v:Float,exp:Float):Float","F"],
["Math.round","(v:Float):Int","F"],
["Math.sin","(v:Float):Float","F"],
["Math.sqrt","(v:Float):Float","F"],
["Math.tan","(v:Float):Float","F"],
["Core.showstats",":Bool","C", "Set to true to show stats like framerate."],
	/*,
["break"],
["case"],
["callback"],
["cast"],
["catch"],
["class"],
["continue"],
["default"],
["do"," expr-loop while( expr-cond );"],
["dynamic"],
["else"],
["enum"],
["extends"],
["extern"],
["false"],
["for","( variable in iterable ) expr-loop;"],
["function"],
["if","( expr-cond ) expr-1 [else expr-2]"],
["implements"],
["import"],
["in"],
["inline"],
["interface"],
["never"],
["new"],
["null"],
["override"],
["package"],
["private"],
["public"],
["return"],
["static"],
["super"],
["switch"],
["this"],
["throw"],
["trace"],
["true"],
["try"],
["typedef"],
["untyped"],
["using"],
["var"],
["while","( expr-cond ) expr-loop;"],
["Int"], 
["Float"], 
["String"], 
["Void"], 
["Bool"], 
["Dynamic"] 
["Array"]*/
];

/*
if you want the hints to be sorted
function compareFn(a,b){
	return a[0].localeCompare(b[0]);
}
haxeHintArray.sort(compareFn);
*/